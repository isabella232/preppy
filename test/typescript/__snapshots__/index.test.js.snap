// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Publish Test File via Typescript 1`] = `
"/*! VERSION_STRING by Sebastian Werner <s.werner@sebastian-software.de> */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
require('core-js/modules/es6.object.assign');
require('core-js/modules/web.dom.iterable');
require('core-js/modules/es6.array.iterator');
require('core-js/modules/es6.string.iterator');
require('core-js/modules/es6.set');
require('core-js/modules/es7.array.includes');
require('core-js/modules/es6.promise');
var lodash = require('lodash');

console.log(\\"CherryPick Import Lodash:\\", lodash.camelCase(\\"hello world\\") === \\"helloWorld\\");
console.log(\\"Package\\", \\"preppy\\");
console.log(\\"Target\\", \\"lib\\");
console.log(\\"ES2016 Enabled:\\", Math.pow(2, 2) === 4);
new Promise(function (resolve, reject) {
  resolve(\\"resolved\\");
}).then(function (first) {
  console.log(\\"Promise:\\", first);
});
var CONSTANT = 123;
console.log(\\"Constant:\\", CONSTANT);
var myArray = [1, 2, 3];
console.log(\\"Supports Array.includes?:\\", myArray.includes && myArray.includes(2));
var mySet = new Set(myArray);
console.log(\\"Supports Set:\\", mySet.add(4));

(function (supportsDefault) {
  if (supportsDefault === void 0) {
    supportsDefault = true;
  }

  console.log(\\"Supports default parameters:\\", supportsDefault);
})();

var testVariable = \\"outer\\";
var _testVariable = \\"inner\\";
console.log(\\"X Value from inner scope:\\", _testVariable);
console.log(\\"X Value from outer scope:\\", testVariable);
var source = {
  first: 1,
  second: 2
};
var destructed = Object.assign({
  third: 3
}, source);
console.log(\\"Destructed:\\", destructed);
var MyClass = function () {
  function MyClass() {
    this.onClick = function () {
      console.log(\\"Clickedx\\");
    };

    console.log(\\"Called constructor\\");
    this.helper();
    this.instanceProperty = 3;
  }

  var _proto = MyClass.prototype;

  _proto.helper = function helper(x) {
    console.log(\\"Called helper: \\" + x);
  };

  return MyClass;
}();

var SecondClass = function (_MyClass) {
  _inheritsLoose(SecondClass, _MyClass);

  function SecondClass() {
    return _MyClass.call(this, 100) || this;
  }

  return SecondClass;
}(MyClass());

console.log(\\"Initialized class:\\", new MyClass());

function helper() {
  return new Promise(function ($return, $error) {
    return Promise.resolve(PromiseHelper()).then(function ($await_1) {
      try {
        return $return(42);
      } catch ($boundEx) {
        return $error($boundEx);
      }
    }, $error);
  });
}

helper();
var setValues = function setValues(values) {
  setState({
    values: values
  }, function () {
    return true;
  });
};

exports.MyClass = MyClass;
exports.setValues = setValues;
//# sourceMappingURL=index.cjs.js.map
"
`;

exports[`Publish Test File via Typescript 2`] = `
"/*! VERSION_STRING by Sebastian Werner <s.werner@sebastian-software.de> */
import _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';
import 'core-js/modules/es6.object.assign';
import 'core-js/modules/web.dom.iterable';
import 'core-js/modules/es6.array.iterator';
import 'core-js/modules/es6.string.iterator';
import 'core-js/modules/es6.set';
import 'core-js/modules/es7.array.includes';
import 'core-js/modules/es6.promise';
import { camelCase } from 'lodash';

console.log(\\"CherryPick Import Lodash:\\", camelCase(\\"hello world\\") === \\"helloWorld\\");
console.log(\\"Package\\", \\"preppy\\");
console.log(\\"Target\\", \\"lib\\");
console.log(\\"ES2016 Enabled:\\", Math.pow(2, 2) === 4);
new Promise(function (resolve, reject) {
  resolve(\\"resolved\\");
}).then(function (first) {
  console.log(\\"Promise:\\", first);
});
var CONSTANT = 123;
console.log(\\"Constant:\\", CONSTANT);
var myArray = [1, 2, 3];
console.log(\\"Supports Array.includes?:\\", myArray.includes && myArray.includes(2));
var mySet = new Set(myArray);
console.log(\\"Supports Set:\\", mySet.add(4));

(function (supportsDefault) {
  if (supportsDefault === void 0) {
    supportsDefault = true;
  }

  console.log(\\"Supports default parameters:\\", supportsDefault);
})();

var testVariable = \\"outer\\";
var _testVariable = \\"inner\\";
console.log(\\"X Value from inner scope:\\", _testVariable);
console.log(\\"X Value from outer scope:\\", testVariable);
var source = {
  first: 1,
  second: 2
};
var destructed = Object.assign({
  third: 3
}, source);
console.log(\\"Destructed:\\", destructed);
var MyClass = function () {
  function MyClass() {
    this.onClick = function () {
      console.log(\\"Clickedx\\");
    };

    console.log(\\"Called constructor\\");
    this.helper();
    this.instanceProperty = 3;
  }

  var _proto = MyClass.prototype;

  _proto.helper = function helper(x) {
    console.log(\\"Called helper: \\" + x);
  };

  return MyClass;
}();

var SecondClass = function (_MyClass) {
  _inheritsLoose(SecondClass, _MyClass);

  function SecondClass() {
    return _MyClass.call(this, 100) || this;
  }

  return SecondClass;
}(MyClass());

console.log(\\"Initialized class:\\", new MyClass());

function helper() {
  return new Promise(function ($return, $error) {
    return Promise.resolve(PromiseHelper()).then(function ($await_1) {
      try {
        return $return(42);
      } catch ($boundEx) {
        return $error($boundEx);
      }
    }, $error);
  });
}

helper();
var setValues = function setValues(values) {
  setState({
    values: values
  }, function () {
    return true;
  });
};

export { MyClass, setValues };
//# sourceMappingURL=index.esm.js.map
"
`;

exports[`Publish Test File via Typescript 3`] = `
"import { FormValues } from \\"./types\\";
export declare class MyClass {
    constructor();
    onClick: () => void;
    helper(x: string): void;
}
export declare const setValues: (values: FormValues) => void;
"
`;

exports[`Publish Test File via Typescript 4`] = `
"/**
 * Values of fields in the form
 */
export interface FormValues {
    [field: string]: any;
}
"
`;
